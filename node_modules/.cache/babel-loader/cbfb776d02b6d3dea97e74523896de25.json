{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\n\nconst useForecast = () => {\n  _s();\n\n  const [forecast, setForecast] = useState(null);\n\n  const getData = async location => {\n    const response = await axios(`${REACT_APP_FORECAST_API_URL}?q=${location}&appid=${process.env.REACT_APP_API_KEY}`);\n\n    if (!response || response.length === 0) {\n      return;\n    }\n\n    return response.data[0];\n  };\n\n  const getForecastData = async data => {\n    const lat = data.lat;\n    const lon = data.lon;\n    const response = await axios(`${process.env.REACT_APP_DATA_API_URL}?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}`);\n\n    if (!response || response.length === 0) {\n      return;\n    }\n\n    return response;\n  };\n\n  const gatherForecastData = response => {\n    const forecast = {};\n    forecast['city'] = response.data.name;\n    forecast['temp'] = response.data.main.temp;\n    forecast['temp_min'] = response.data.main.temp_min;\n    forecast['temp_max'] = response.data.main.temp_max;\n    forecast['feels_like'] = response.data.main.feels_like;\n    forecast['sunrise'] = response.data.sys.sunrise;\n    forecast['sunset'] = response.data.sys.sunset;\n    setForecast(forecast);\n  };\n\n  const submitRequest = async location => {\n    const response = await getData(location);\n    if (!response) return;\n    const data = await getForecastData(response);\n    if (!data) return;\n    gatherForecastData(data);\n  };\n\n  return {\n    forecast,\n    submitRequest\n  };\n};\n\n_s(useForecast, \"NUV57NqSRfyR1Y8ZsxYqIIUkjSI=\");\n\nexport default useForecast;","map":{"version":3,"sources":["/Users/anushka.maheshwari/Desktop/react-task2/src/hooks/useForecast.js"],"names":["useState","axios","useForecast","forecast","setForecast","getData","location","response","REACT_APP_FORECAST_API_URL","process","env","REACT_APP_API_KEY","length","data","getForecastData","lat","lon","REACT_APP_DATA_API_URL","gatherForecastData","name","main","temp","temp_min","temp_max","feels_like","sys","sunrise","sunset","submitRequest"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAuBJ,QAAQ,CAAC,IAAD,CAArC;;AACA,QAAMK,OAAO,GAAG,MAAMC,QAAN,IAAkB;AAC9B,UAAOC,QAAQ,GAAG,MAAMN,KAAK,CAAE,GAAEO,0BAA2B,MAAKF,QAAS,UAASG,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAApF,CAA7B;;AACA,QAAI,CAACJ,QAAD,IAAaA,QAAQ,CAACK,MAAT,KAAoB,CAArC,EAAwC;AACpC;AACH;;AACD,WAAOL,QAAQ,CAACM,IAAT,CAAc,CAAd,CAAP;AACH,GAND;;AAQA,QAAMC,eAAe,GAAG,MAAMD,IAAN,IAAc;AAClC,UAAME,GAAG,GAACF,IAAI,CAACE,GAAf;AACA,UAAMC,GAAG,GAACH,IAAI,CAACG,GAAf;AACA,UAAOT,QAAQ,GAAI,MAAMN,KAAK,CAAE,GAAEQ,OAAO,CAACC,GAAR,CAAYO,sBAAuB,QAAOF,GAAI,QAAOC,GAAI,UAASP,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAApG,CAA9B;;AACA,QAAI,CAACJ,QAAD,IAAaA,QAAQ,CAACK,MAAT,KAAoB,CAArC,EAAwC;AACpC;AACH;;AACD,WAAOL,QAAP;AACH,GARD;;AASA,QAAMW,kBAAkB,GAAGX,QAAQ,IAAI;AACnC,UAAMJ,QAAQ,GAAC,EAAf;AACAA,IAAAA,QAAQ,CAAC,MAAD,CAAR,GAAiBI,QAAQ,CAACM,IAAT,CAAcM,IAA/B;AACAhB,IAAAA,QAAQ,CAAC,MAAD,CAAR,GAAiBI,QAAQ,CAACM,IAAT,CAAcO,IAAd,CAAmBC,IAApC;AACAlB,IAAAA,QAAQ,CAAC,UAAD,CAAR,GAAqBI,QAAQ,CAACM,IAAT,CAAcO,IAAd,CAAmBE,QAAxC;AACAnB,IAAAA,QAAQ,CAAC,UAAD,CAAR,GAAqBI,QAAQ,CAACM,IAAT,CAAcO,IAAd,CAAmBG,QAAxC;AACApB,IAAAA,QAAQ,CAAC,YAAD,CAAR,GAAuBI,QAAQ,CAACM,IAAT,CAAcO,IAAd,CAAmBI,UAA1C;AACArB,IAAAA,QAAQ,CAAC,SAAD,CAAR,GAAoBI,QAAQ,CAACM,IAAT,CAAcY,GAAd,CAAkBC,OAAtC;AACAvB,IAAAA,QAAQ,CAAC,QAAD,CAAR,GAAmBI,QAAQ,CAACM,IAAT,CAAcY,GAAd,CAAkBE,MAArC;AACAvB,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAVD;;AAYA,QAAMyB,aAAa,GAAG,MAAMtB,QAAN,IAAkB;AACpC,UAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACC,QAAD,CAA9B;AACA,QAAG,CAACC,QAAJ,EAAc;AACd,UAAMM,IAAI,GAAG,MAAMC,eAAe,CAACP,QAAD,CAAlC;AACA,QAAI,CAACM,IAAL,EAAW;AACXK,IAAAA,kBAAkB,CAACL,IAAD,CAAlB;AACH,GAND;;AAQA,SAAO;AACHV,IAAAA,QADG;AAEHyB,IAAAA;AAFG,GAAP;AAIH,CA3CD;;GAAM1B,W;;AA8CN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nconst useForecast = () => {\n    const [forecast,setForecast]=useState(null);\n    const getData = async location => {\n        const  response = await axios(`${REACT_APP_FORECAST_API_URL}?q=${location}&appid=${process.env.REACT_APP_API_KEY}`);\n        if (!response || response.length === 0) {\n            return;\n        }\n        return response.data[0];\n    };\n\n    const getForecastData = async data => {\n        const lat=data.lat;\n        const lon=data.lon;\n        const  response  = await axios(`${process.env.REACT_APP_DATA_API_URL}?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}`);\n        if (!response || response.length === 0) {\n            return;\n        }\n        return response;\n    };\n    const gatherForecastData = response => {\n        const forecast={}\n        forecast['city']=response.data.name;\n        forecast['temp']=response.data.main.temp;\n        forecast['temp_min']=response.data.main.temp_min;\n        forecast['temp_max']=response.data.main.temp_max;\n        forecast['feels_like']=response.data.main.feels_like;\n        forecast['sunrise']=response.data.sys.sunrise;\n        forecast['sunset']=response.data.sys.sunset;\n        setForecast(forecast);\n    };\n\n    const submitRequest = async location => {\n        const response = await getData(location);\n        if(!response) return;\n        const data = await getForecastData(response);\n        if (!data) return;\n        gatherForecastData(data);\n    };\n\n    return {\n        forecast,\n        submitRequest,\n    };\n};\n\n\nexport default useForecast;"]},"metadata":{},"sourceType":"module"}