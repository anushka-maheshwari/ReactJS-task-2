{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\n\nconst useForecast = () => {\n  _s();\n\n  const [isError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  const getData = async location => {\n    console.log(location);\n    const {\n      response\n    } = await axios(`http://api.openweathermap.org/geo/1.0/direct?q=${location}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n    if (!response || response.length === 0) {\n      setError('There is no such location');\n      setLoading(false);\n      return;\n    }\n\n    return response.data[0];\n  };\n\n  const getForecastData = async data => {\n    const lat = data.lat;\n    const lon = data.lon;\n    const {\n      response\n    } = await axios(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n    if (!response || response.length === 0) {\n      setError('Something went wrong');\n      setLoading(false);\n      return;\n    }\n\n    const [data1] = [response.data.main.temp, response.data.main.temp_max, response.data.main.temp_min, response.data.main.feels_like, response.data.sys.sunrise, response.data.sys.sunset];\n    return data1;\n  };\n\n  const submitRequest = async location => {\n    setLoading(true);\n    setError(false);\n    console.log({\n      location\n    });\n    const response = await getData({\n      location\n    });\n    console.log(response);\n    if (!response) return;\n    const data = await getForecastData(response);\n    if (!data) return;\n    console.lat(data);\n  };\n\n  return {\n    isError,\n    isLoading,\n    forecast,\n    submitRequest\n  };\n};\n\n_s(useForecast, \"98jJfAbkRG8B5Phem9UEdOko1FU=\");\n\nexport default useForecast;","map":{"version":3,"sources":["/Users/anushka.maheshwari/Desktop/react-task2/src/hooks/useForecast.js"],"names":["useState","axios","useForecast","isError","setError","isLoading","setLoading","forecast","setForecast","getData","location","console","log","response","length","data","getForecastData","lat","lon","data1","main","temp","temp_max","temp_min","feels_like","sys","sunrise","sunset","submitRequest"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBJ,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,UAAZ,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMS,OAAO,GAAG,MAAMC,QAAN,IAAkB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAc,MAAMZ,KAAK,CAAE,kDAAiDS,QAAS,yCAA5D,CAA/B;;AAEA,QAAI,CAACG,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACpCV,MAAAA,QAAQ,CAAC,2BAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AACD,WAAOO,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAP;AACH,GAVD;;AAYA,QAAMC,eAAe,GAAG,MAAMD,IAAN,IAAc;AAClC,UAAME,GAAG,GAACF,IAAI,CAACE,GAAf;AACA,UAAMC,GAAG,GAACH,IAAI,CAACG,GAAf;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAe,MAAMZ,KAAK,CAAE,sDAAqDgB,GAAI,QAAOC,GAAI,yCAAtE,CAAhC;;AAEA,QAAI,CAACL,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACpCV,MAAAA,QAAQ,CAAC,sBAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AACD,UAAM,CAACa,KAAD,IAAQ,CAACN,QAAQ,CAACE,IAAT,CAAcK,IAAd,CAAmBC,IAApB,EAAyBR,QAAQ,CAACE,IAAT,CAAcK,IAAd,CAAmBE,QAA5C,EAAqDT,QAAQ,CAACE,IAAT,CAAcK,IAAd,CAAmBG,QAAxE,EAAiFV,QAAQ,CAACE,IAAT,CAAcK,IAAd,CAAmBI,UAApG,EACVX,QAAQ,CAACE,IAAT,CAAcU,GAAd,CAAkBC,OADR,EACgBb,QAAQ,CAACE,IAAT,CAAcU,GAAd,CAAkBE,MADlC,CAAd;AAEA,WAAOR,KAAP;AACH,GAbD;;AAeA,QAAMS,aAAa,GAAG,MAAMlB,QAAN,IAAkB;AACpCJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,MAAAA;AAAD,KAAZ;AACA,UAAMG,QAAQ,GAAG,MAAMJ,OAAO,CAAC;AAACC,MAAAA;AAAD,KAAD,CAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,QAAG,CAACA,QAAJ,EAAc;AACd,UAAME,IAAI,GAAG,MAAMC,eAAe,CAACH,QAAD,CAAlC;AACA,QAAI,CAACE,IAAL,EAAW;AAEXJ,IAAAA,OAAO,CAACM,GAAR,CAAYF,IAAZ;AACH,GAXD;;AAaA,SAAO;AACHZ,IAAAA,OADG;AAEHE,IAAAA,SAFG;AAGHE,IAAAA,QAHG;AAIHqB,IAAAA;AAJG,GAAP;AAMH,CAnDD;;GAAM1B,W;;AAsDN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nconst useForecast = () => {\n    const [isError, setError] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n    const [forecast, setForecast] = useState(null);\n\n    const getData = async location => {\n        console.log(location);\n        const { response} = await axios(`http://api.openweathermap.org/geo/1.0/direct?q=${location}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n        if (!response || response.length === 0) {\n            setError('There is no such location');\n            setLoading(false);\n            return;\n        }\n        return response.data[0];\n    };\n\n    const getForecastData = async data => {\n        const lat=data.lat;\n        const lon=data.lon;\n        const { response } = await axios(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n        if (!response || response.length === 0) {\n            setError('Something went wrong');\n            setLoading(false);\n            return;\n        }\n        const [data1]=[response.data.main.temp,response.data.main.temp_max,response.data.main.temp_min,response.data.main.feels_like,\n            response.data.sys.sunrise,response.data.sys.sunset]\n        return data1;\n    };\n\n    const submitRequest = async location => {\n        setLoading(true);\n        setError(false);\n        console.log({location})\n        const response = await getData({location});\n        console.log(response);\n        if(!response) return;\n        const data = await getForecastData(response);\n        if (!data) return;\n\n        console.lat(data);\n    };\n\n    return {\n        isError,\n        isLoading,\n        forecast,\n        submitRequest,\n    };\n};\n\n\nexport default useForecast;"]},"metadata":{},"sourceType":"module"}