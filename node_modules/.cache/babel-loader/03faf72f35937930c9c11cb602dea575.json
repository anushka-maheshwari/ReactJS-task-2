{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\n\nconst useForecast = () => {\n  _s();\n\n  const [isError, setError] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  const getData = async location => {\n    const response = await axios(`http://api.openweathermap.org/geo/1.0/direct?q=${location}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n    if (!response || response.length === 0) {\n      setError('There is no such location');\n      return;\n    }\n\n    return response.data[0];\n  };\n\n  const getForecastData = async data => {\n    const lat = data.lat;\n    const lon = data.lon;\n    const response = await axios(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n    if (!response || response.length === 0) {\n      setError('Something went wrong');\n      return;\n    }\n\n    return response;\n  };\n\n  const gatherForecastData = response => {\n    const forecast = {};\n    forecast['city'] = response.data.name;\n    forecast['temp'] = response.data.main.temp;\n    forecast['temp_min'] = response.data.main.temp_min;\n    forecast['temp_max'] = response.data.main.temp_max;\n    forecast['feels_like'] = response.data.main.feels_like;\n    forecast['sunrise'] = response.data.sys.sunrise;\n    forecast['sunset'] = response.data.sys.sunset;\n    setForecast(forecast);\n  };\n\n  const submitRequest = async location => {\n    setError(false);\n    const response = await getData(location);\n    if (!response) return;\n    const data = await getForecastData(response);\n    if (!data) return;\n    console.log(data);\n    gatherForecastData(data);\n  };\n\n  return {\n    isError,\n    forecast,\n    submitRequest\n  };\n};\n\n_s(useForecast, \"/1Lozaxw/0FEBtOl6Ff9zRIp79o=\");\n\nexport default useForecast;","map":{"version":3,"sources":["/Users/anushka.maheshwari/Desktop/react-task2/src/hooks/useForecast.js"],"names":["useState","axios","useForecast","isError","setError","forecast","setForecast","getData","location","response","length","data","getForecastData","lat","lon","gatherForecastData","name","main","temp","temp_min","temp_max","feels_like","sys","sunrise","sunset","submitRequest","console","log"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBJ,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACK,QAAD,EAAUC,WAAV,IAAuBN,QAAQ,CAAC,IAAD,CAArC;;AAEA,QAAMO,OAAO,GAAG,MAAMC,QAAN,IAAkB;AAC9B,UAAOC,QAAQ,GAAG,MAAMR,KAAK,CAAE,kDAAiDO,QAAS,yCAA5D,CAA7B;;AACA,QAAI,CAACC,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACpCN,MAAAA,QAAQ,CAAC,2BAAD,CAAR;AACA;AACH;;AACD,WAAOK,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAP;AACH,GAPD;;AASA,QAAMC,eAAe,GAAG,MAAMD,IAAN,IAAc;AAClC,UAAME,GAAG,GAACF,IAAI,CAACE,GAAf;AACA,UAAMC,GAAG,GAACH,IAAI,CAACG,GAAf;AACA,UAAOL,QAAQ,GAAI,MAAMR,KAAK,CAAE,sDAAqDY,GAAI,QAAOC,GAAI,yCAAtE,CAA9B;;AACA,QAAI,CAACL,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACpCN,MAAAA,QAAQ,CAAC,sBAAD,CAAR;AACA;AACH;;AACD,WAAOK,QAAP;AACH,GATD;;AAUA,QAAMM,kBAAkB,GAAGN,QAAQ,IAAI;AACnC,UAAMJ,QAAQ,GAAC,EAAf;AACAA,IAAAA,QAAQ,CAAC,MAAD,CAAR,GAAiBI,QAAQ,CAACE,IAAT,CAAcK,IAA/B;AACAX,IAAAA,QAAQ,CAAC,MAAD,CAAR,GAAiBI,QAAQ,CAACE,IAAT,CAAcM,IAAd,CAAmBC,IAApC;AACAb,IAAAA,QAAQ,CAAC,UAAD,CAAR,GAAqBI,QAAQ,CAACE,IAAT,CAAcM,IAAd,CAAmBE,QAAxC;AACAd,IAAAA,QAAQ,CAAC,UAAD,CAAR,GAAqBI,QAAQ,CAACE,IAAT,CAAcM,IAAd,CAAmBG,QAAxC;AACAf,IAAAA,QAAQ,CAAC,YAAD,CAAR,GAAuBI,QAAQ,CAACE,IAAT,CAAcM,IAAd,CAAmBI,UAA1C;AACAhB,IAAAA,QAAQ,CAAC,SAAD,CAAR,GAAoBI,QAAQ,CAACE,IAAT,CAAcW,GAAd,CAAkBC,OAAtC;AACAlB,IAAAA,QAAQ,CAAC,QAAD,CAAR,GAAmBI,QAAQ,CAACE,IAAT,CAAcW,GAAd,CAAkBE,MAArC;AACAlB,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAVD;;AAYA,QAAMoB,aAAa,GAAG,MAAMjB,QAAN,IAAkB;AACpCJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,UAAMK,QAAQ,GAAG,MAAMF,OAAO,CAACC,QAAD,CAA9B;AACA,QAAG,CAACC,QAAJ,EAAc;AACd,UAAME,IAAI,GAAG,MAAMC,eAAe,CAACH,QAAD,CAAlC;AACA,QAAI,CAACE,IAAL,EAAW;AACXe,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACAI,IAAAA,kBAAkB,CAACJ,IAAD,CAAlB;AACH,GARD;;AAUA,SAAO;AACHR,IAAAA,OADG;AAEHE,IAAAA,QAFG;AAGHoB,IAAAA;AAHG,GAAP;AAKH,CAlDD;;GAAMvB,W;;AAqDN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nconst useForecast = () => {\n    const [isError, setError] = useState(false);\n    const [forecast,setForecast]=useState(null);\n\n    const getData = async location => {\n        const  response = await axios(`http://api.openweathermap.org/geo/1.0/direct?q=${location}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n        if (!response || response.length === 0) {\n            setError('There is no such location');\n            return;\n        }\n        return response.data[0];\n    };\n\n    const getForecastData = async data => {\n        const lat=data.lat;\n        const lon=data.lon;\n        const  response  = await axios(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n        if (!response || response.length === 0) {\n            setError('Something went wrong');\n            return;\n        }\n        return response;\n    };\n    const gatherForecastData = response => {\n        const forecast={}\n        forecast['city']=response.data.name;\n        forecast['temp']=response.data.main.temp;\n        forecast['temp_min']=response.data.main.temp_min;\n        forecast['temp_max']=response.data.main.temp_max;\n        forecast['feels_like']=response.data.main.feels_like;\n        forecast['sunrise']=response.data.sys.sunrise;\n        forecast['sunset']=response.data.sys.sunset;\n        setForecast(forecast);\n    };\n\n    const submitRequest = async location => {\n        setError(false);\n        const response = await getData(location);\n        if(!response) return;\n        const data = await getForecastData(response);\n        if (!data) return;\n        console.log(data);\n        gatherForecastData(data);\n    };\n\n    return {\n        isError,\n        forecast,\n        submitRequest,\n    };\n};\n\n\nexport default useForecast;"]},"metadata":{},"sourceType":"module"}