{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\n\nconst useForecast = () => {\n  _s();\n\n  const [isError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const forecast = {};\n\n  const getData = async location => {\n    const response = await axios(`http://api.openweathermap.org/geo/1.0/direct?q=${location}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n    if (!response || response.length === 0) {\n      setError('There is no such location');\n      setLoading(false);\n      return;\n    }\n\n    return response.data[0];\n  };\n\n  const getForecastData = async data => {\n    const lat = data.lat;\n    const lon = data.lon;\n    const response = await axios(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n\n    if (!response || response.length === 0) {\n      setError('Something went wrong');\n      setLoading(false);\n      return;\n    }\n\n    return response;\n  };\n\n  const gatherForecastData = response => {\n    console.log(response);\n    forecast['temp'] = response.data.main.temp;\n    forecast['temp_min'] = response.data.main.temp_min;\n    forecast['temp_max'] = response.data.main.temp_max;\n    forecast['feels_like'] = response.data.main.feels_like;\n    forecast['sunrise'] = response.data.sys.sunrise;\n    forecast['sunset'] = response.data.sys.sunset;\n    setLoading(false);\n  };\n\n  const submitRequest = async location => {\n    setLoading(true);\n    setError(false);\n    const response = await getData(location);\n    if (!response) return;\n    const data = await getForecastData(response);\n    if (!data) return;\n    gatherForecastData(data);\n    console.log(forecast);\n  };\n\n  return {\n    isError,\n    isLoading,\n    forecast,\n    submitRequest\n  };\n};\n\n_s(useForecast, \"Q0ByaEd0zb7VCu3iTox5yMJBgK0=\");\n\nexport default useForecast;","map":{"version":3,"sources":["/Users/anushka.maheshwari/Desktop/react-task2/src/hooks/useForecast.js"],"names":["useState","axios","useForecast","isError","setError","isLoading","setLoading","forecast","getData","location","response","length","data","getForecastData","lat","lon","gatherForecastData","console","log","main","temp","temp_min","temp_max","feels_like","sys","sunrise","sunset","submitRequest"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBJ,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,UAAZ,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMO,QAAQ,GAAC,EAAf;;AAEA,QAAMC,OAAO,GAAG,MAAMC,QAAN,IAAkB;AAC9B,UAAOC,QAAQ,GAAG,MAAMT,KAAK,CAAE,kDAAiDQ,QAAS,yCAA5D,CAA7B;;AACA,QAAI,CAACC,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACpCP,MAAAA,QAAQ,CAAC,2BAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AACD,WAAOI,QAAQ,CAACE,IAAT,CAAc,CAAd,CAAP;AACH,GARD;;AAUA,QAAMC,eAAe,GAAG,MAAMD,IAAN,IAAc;AAClC,UAAME,GAAG,GAACF,IAAI,CAACE,GAAf;AACA,UAAMC,GAAG,GAACH,IAAI,CAACG,GAAf;AACA,UAAOL,QAAQ,GAAI,MAAMT,KAAK,CAAE,sDAAqDa,GAAI,QAAOC,GAAI,yCAAtE,CAA9B;;AACA,QAAI,CAACL,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACpCP,MAAAA,QAAQ,CAAC,sBAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AACD,WAAOI,QAAP;AACH,GAVD;;AAWA,QAAMM,kBAAkB,GAAGN,QAAQ,IAAI;AACnCO,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AACAH,IAAAA,QAAQ,CAAC,MAAD,CAAR,GAAiBG,QAAQ,CAACE,IAAT,CAAcO,IAAd,CAAmBC,IAApC;AACAb,IAAAA,QAAQ,CAAC,UAAD,CAAR,GAAqBG,QAAQ,CAACE,IAAT,CAAcO,IAAd,CAAmBE,QAAxC;AACAd,IAAAA,QAAQ,CAAC,UAAD,CAAR,GAAqBG,QAAQ,CAACE,IAAT,CAAcO,IAAd,CAAmBG,QAAxC;AACAf,IAAAA,QAAQ,CAAC,YAAD,CAAR,GAAuBG,QAAQ,CAACE,IAAT,CAAcO,IAAd,CAAmBI,UAA1C;AACAhB,IAAAA,QAAQ,CAAC,SAAD,CAAR,GAAoBG,QAAQ,CAACE,IAAT,CAAcY,GAAd,CAAkBC,OAAtC;AACAlB,IAAAA,QAAQ,CAAC,QAAD,CAAR,GAAmBG,QAAQ,CAACE,IAAT,CAAcY,GAAd,CAAkBE,MAArC;AACApB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GATD;;AAWA,QAAMqB,aAAa,GAAG,MAAMlB,QAAN,IAAkB;AACpCH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,UAAMM,QAAQ,GAAG,MAAMF,OAAO,CAACC,QAAD,CAA9B;AACA,QAAG,CAACC,QAAJ,EAAc;AACd,UAAME,IAAI,GAAG,MAAMC,eAAe,CAACH,QAAD,CAAlC;AACA,QAAI,CAACE,IAAL,EAAW;AACXI,IAAAA,kBAAkB,CAACJ,IAAD,CAAlB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACH,GATD;;AAWA,SAAO;AACHJ,IAAAA,OADG;AAEHE,IAAAA,SAFG;AAGHE,IAAAA,QAHG;AAIHoB,IAAAA;AAJG,GAAP;AAMH,CAtDD;;GAAMzB,W;;AAyDN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nconst useForecast = () => {\n    const [isError, setError] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n    const forecast={}\n\n    const getData = async location => {\n        const  response = await axios(`http://api.openweathermap.org/geo/1.0/direct?q=${location}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n        if (!response || response.length === 0) {\n            setError('There is no such location');\n            setLoading(false);\n            return;\n        }\n        return response.data[0];\n    };\n\n    const getForecastData = async data => {\n        const lat=data.lat;\n        const lon=data.lon;\n        const  response  = await axios(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=8daa67bc5aa6f4004f105953f01aadfd`);\n        if (!response || response.length === 0) {\n            setError('Something went wrong');\n            setLoading(false);\n            return;\n        }\n        return response;\n    };\n    const gatherForecastData = response => {\n        console.log(response);\n        forecast['temp']=response.data.main.temp;\n        forecast['temp_min']=response.data.main.temp_min;\n        forecast['temp_max']=response.data.main.temp_max;\n        forecast['feels_like']=response.data.main.feels_like;\n        forecast['sunrise']=response.data.sys.sunrise;\n        forecast['sunset']=response.data.sys.sunset;\n        setLoading(false);\n    };\n\n    const submitRequest = async location => {\n        setLoading(true);\n        setError(false);\n        const response = await getData(location);\n        if(!response) return;\n        const data = await getForecastData(response);\n        if (!data) return;\n        gatherForecastData(data);\n        console.log(forecast);\n    };\n\n    return {\n        isError,\n        isLoading,\n        forecast,\n        submitRequest,\n    };\n};\n\n\nexport default useForecast;"]},"metadata":{},"sourceType":"module"}